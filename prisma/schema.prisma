generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  firstname String
  lastname  String
  email     String     @unique
  password  String
  phone     String
  photo     String
  genre     Genre      @default(MALE)
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  actor     Actor?
  chats     Chat[]
  commandes Commande[]
  comments  Comment[]
  dislikes  Dislike[]
  favoris   Favori[]
  follow    Follow[]
  likes     Like[]
  report    Report[]
  reposts   Repost[]
  Share     Share[]    @relation("SharesFromUser")
  received  Share[]    @relation("SharesToUser")
  ventes    Vente[]

  @@map("users")
}

model Favori {
  id        Int      @id @default(autoincrement())
  idUser    Int
  idPost    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [idPost], references: [id])
  user      User     @relation(fields: [idUser], references: [id])

  @@map("favoris")
}

model Actor {
  id        Int       @id @default(autoincrement())
  idUser    Int       @unique
  address   String
  bio       String
  credits   Int       @default(50)
  vote      Int       @default(0)
  role      Role      @default(TAILOR)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [idUser], references: [id])
  Chat      Chat[]
  follow    Follow[]
  posts     Post[]
  produits  Produit[]
  story     Story[]
  ventes    Vente[]

  @@map("actors")
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  category    String
  size        SIZE      @default(M)
  content     Json
  idActor     Int
  vues        Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  dislikes    Dislike[]
  favoris     Favori[]
  likes       Like[]
  user        Actor     @relation(fields: [idActor], references: [id])
  reports     Report[]
  reposts     Repost[]
  share       Share[]
  tags        Tag[]

  @@map("posts")
}

model Like {
  id        Int      @id @default(autoincrement())
  idUser    Int
  idPost    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [idPost], references: [id])
  author    User     @relation(fields: [idUser], references: [id])

  @@map("likes")
}

model Dislike {
  id        Int      @id @default(autoincrement())
  idUser    Int
  idPost    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [idPost], references: [id])
  author    User     @relation(fields: [idUser], references: [id])

  @@map("dislikes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  idUser    Int
  idPost    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  idStory   Int?
  post      Post?    @relation(fields: [idPost], references: [id])
  story     Story?   @relation(fields: [idStory], references: [id])
  author    User     @relation(fields: [idUser], references: [id])

  @@map("comments")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  idPost    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [idPost], references: [id])

  @@unique([name, idPost])
  @@map("tags")
}

model Share {
  id         Int      @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  idPost     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUser   User     @relation("SharesFromUser", fields: [fromUserId], references: [id])
  post       Post     @relation(fields: [idPost], references: [id])
  toUser     User     @relation("SharesToUser", fields: [toUserId], references: [id])

  @@map("shares")
}

model Repost {
  id        Int      @id @default(autoincrement())
  idUser    Int
  idPost    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [idPost], references: [id])
  user      User     @relation(fields: [idUser], references: [id])

  @@map("reposts")
}

model Report {
  id        Int      @id @default(autoincrement())
  idUser    Int
  idPost    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [idPost], references: [id])
  user      User     @relation(fields: [idUser], references: [id])

  @@map("reports")
}

model Produit {
  id          Int               @id @default(autoincrement())
  libelle     String
  description String
  image       String
  price       Float
  qte         Int
  idUser      Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  commandes   CommandeProduit[]
  vendor      Actor             @relation(fields: [idUser], references: [id])
  ventes      Vente[]

  @@map("produits")
}

model Follow {
  id        Int      @id @default(autoincrement())
  idUser    Int
  idActor   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  actor     Actor    @relation(fields: [idActor], references: [id])
  user      User     @relation(fields: [idUser], references: [id])

  @@unique([idActor, idUser])
  @@map("follows")
}

model Vente {
  id        Int      @id @default(autoincrement())
  idActor   Int
  idProduit Int
  idUser    Int
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  actor     Actor    @relation(fields: [idActor], references: [id])
  produit   Produit  @relation(fields: [idProduit], references: [id])
  user      User     @relation(fields: [idUser], references: [id])

  @@map("ventes")
}

model Commande {
  id        Int               @id @default(autoincrement())
  idUser    Int
  montant   Float
  statut    STATUT            @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  produits  CommandeProduit[]
  user      User              @relation(fields: [idUser], references: [id])

  @@map("commandes")
}

model CommandeProduit {
  id         Int      @id @default(autoincrement())
  idCommande Int
  idProduit  Int
  qte        Int
  price      Float
  commande   Commande @relation(fields: [idCommande], references: [id])
  produit    Produit  @relation(fields: [idProduit], references: [id])

  @@unique([idProduit, idCommande])
  @@map("commande_produits")
}

model Story {
  id          Int       @id @default(autoincrement())
  idActory    Int
  photo       String?
  description String
  title       String
  vues        Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
  actor       Actor     @relation(fields: [idActory], references: [id])

  @@map("stories")
}

model GenerateCode {
  id        Int      @id @default(autoincrement())
  code      String
  price     Float
  credit    Int
  status    STATUS   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("codes")
}

model Chat {
  id        Int      @id @default(autoincrement())
  idUser    Int
  idActor   Int
  message   String
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  actor     Actor    @relation(fields: [idActor], references: [id])
  user      User     @relation(fields: [idUser], references: [id])

  @@map("chats")
}

enum Genre {
  MALE
  FEMALE
}

enum Role {
  TAILOR
  USER
  VENDOR
}

enum STATUT {
  PENDING
  VALIDATED
}

enum SIZE {
  XS
  S
  M
  L
  XL
}

enum STATUS {
  PENDING
  USED
}
